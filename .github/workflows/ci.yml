name: HighFive_CI

concurrency:
  group: ${{ github.workflow }}#${{ github.ref }}
  cancel-in-progress: true

on:
  push:
    branches:
      - ci_test
      - release/**
  pull_request:
    branches:
      - master
      - release/**
    paths-ignore:
      - '**.md'
      - '**.rst'
      - 'doc/**'

env:
  HOMEBREW_NO_AUTO_UPDATE: 1  # for reproducibility, dont autoupdate
  BUILD_TYPE: RelWithDebInfo
  INSTALL_DIR: install

jobs:

  # Job testing compiling on several Ubuntu systems + MPI
  # =========================================================
  #
  # For 18.04:  bare HighFive
  # For 20.04:  activate Boost, OpenCV
  # For latest: activate Boost, Eigen, OpenCV, with Ninja
  #
  # XTensor tests are run for conda/mamba and MacOS
  Linux_MPI:
    runs-on: ${{matrix.os}}
    strategy:
      matrix:
        os: [ubuntu-18.04, ubuntu-20.04, ubuntu-latest]
        include:
          - os: ubuntu-18.04
            pkgs: ''
            flags: '-DHIGHFIVE_USE_BOOST:Bool=OFF'
          - os: ubuntu-20.04
            pkgs: 'libboost-all-dev libopencv-dev'
            flags: '-DHIGHFIVE_USE_OPENCV:Bool=ON -GNinja'
          - os: ubuntu-latest
            pkgs: 'libboost-all-dev libeigen3-dev libopencv-dev'
            flags: '-DHIGHFIVE_USE_EIGEN:Bool=ON -DHIGHFIVE_USE_OPENCV:Bool=ON -GNinja'

    steps:
    - uses: actions/checkout@v3
      with:
        submodules: true

    - name: "Setup MPI"
      uses: mpi4py/setup-mpi@v1
      with:
        mpi: openmpi

    - name: "Install libraries"
      run: |
        sudo apt-get -qq update
        sudo apt-get -qq install libhdf5-openmpi-dev libsz2 ninja-build ${{ matrix.pkgs }}

    - name: Build
      run: |
        CMAKE_OPTIONS=(-DHIGHFIVE_PARALLEL_HDF5:BOOL=ON ${{ matrix.flags }})
        source $GITHUB_WORKSPACE/.github/build.sh

    - name: Test
      working-directory: ${{github.workspace}}/build
      run: ctest --output-on-failure -C $BUILD_TYPE


  # Job testing several compilers on a stable Linux
  # ====================================================
  Linux_Compilers:
    runs-on: ubuntu-20.04
    strategy:
      matrix:
        env: [
          {CC: clang-10, CXX: clang++-10},
          {CC: clang-12, CXX: clang++-12},
          {CC: gcc-9, CXX: g++-9},
          {CC: gcc-10, CXX: g++-10},
        ]

    steps:
    - uses: actions/checkout@v3
      with:
        submodules: true

    - name: "Install libraries"
      run: |
        sudo apt-get update
        sudo apt-get install libboost-all-dev libhdf5-dev libsz2 ninja-build

    - name: Build
      env: ${{matrix.env}}
      run: |
        CMAKE_OPTIONS=(-GNinja)
        source $GITHUB_WORKSPACE/.github/build.sh

    - name: Test
      working-directory: ${{github.workspace}}/build
      run: ctest --output-on-failure -C $BUILD_TYPE


  # Job testing in OSX
  # =======================
  OSX:
    runs-on: macOS-10.15

    steps:
    - uses: actions/checkout@v3
      with:
        submodules: true

    - name: "Install libraries (OSX)"
      run: brew install boost eigen hdf5 ninja xtensor

    - name: Build
      run: |
        CMAKE_OPTIONS=(
          -GNinja
          -DHIGHFIVE_USE_BOOST:BOOL=ON
          -DHIGHFIVE_USE_EIGEN:BOOL=ON
          -DHIGHFIVE_USE_XTENSOR:BOOL=ON
          -DHIGHFIVE_BUILD_DOCS:BOOL=FALSE
          -DCMAKE_CXX_FLAGS="-coverage -O0"
        )
        source $GITHUB_WORKSPACE/.github/build.sh

    - name: Test
      working-directory: ${{github.workspace}}/build
      run: ctest --output-on-failure -C $BUILD_TYPE


  # Job testing in Windows
  # ===========================
  Windows:
    runs-on: Windows-latest
    steps:
    - uses: actions/checkout@v3

    - uses: mamba-org/provision-with-micromamba@main
      with:
        environment-file: doc/environment.yaml
        environment-name: win-test

    - name: Build
      shell: bash -l {0}
      run: |
        CMAKE_OPTIONS=(
          -DHIGHFIVE_UNIT_TESTS=ON
          -DHIGHFIVE_USE_BOOST:BOOL=ON
          -DHIGHFIVE_USE_EIGEN:BOOL=ON
          -DHIGHFIVE_USE_XTENSOR:BOOL=ON
        )
        source $GITHUB_WORKSPACE/.github/build.sh

    - name: Test
      working-directory: ${{github.workspace}}/build
      shell: bash -l {0}
      run: ctest --output-on-failure -C $BUILD_TYPE

  # Job producing code coverage report
  # ==================================
  Code_coverage:
    # When ubuntu version will be upgrade, you should look if xtensor is nowavailable
    runs-on: ubuntu-20.04

    steps:
    - name: "Install libraries"
      run: |
        sudo apt-get update
        sudo apt-get install lcov libboost-all-dev libhdf5-dev libeigen3-dev libopencv-dev libsz2 ninja-build

    - uses: actions/checkout@v3
      with:
        fetch-depth: 2
        submodules: true

    - name: Build and test for code coverage
      run: |
        CMAKE_OPTIONS=(
          -GNinja
          -DHIGHFIVE_USE_BOOST:BOOL=ON
          -DHIGHFIVE_USE_EIGEN:BOOL=ON
          -DHIGHFIVE_USE_OPENCV:BOOL=ON
          #-DHIGHFIVE_USE_XTENSOR:BOOL=ON
          -DHIGHFIVE_BUILD_DOCS:BOOL=FALSE
          -DCMAKE_CXX_FLAGS="-coverage -O0"
        )
        source $GITHUB_WORKSPACE/.github/build.sh
        cd $HIGHFIVE_BUILD
        (cd $GITHUB_WORKSPACE;  lcov --capture  --initial --directory . --no-external --output-file build/coverage-base.info)
        cmake --build $HIGHFIVE_BUILD --target test
        (cd $GITHUB_WORKSPACE; lcov --capture  --directory . --no-external --output-file build/coverage-run.info)
        lcov --add-tracefile coverage-base.info --add-tracefile coverage-run.info --output-file coverage-combined.info
        bash <(curl -s https://codecov.io/bash) -f coverage-combined.info
