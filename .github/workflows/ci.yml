name: HighFive_CI

concurrency:
  group: ${{ github.workflow }}#${{ github.ref }}
  cancel-in-progress: true

on:
  push:
    branches:
      - ci_test
      - release/**
  pull_request:
    branches:
      - master
      - release/**
    paths-ignore:
      - '**.md'
      - '**.rst'
      - 'doc/**'

env:
  HOMEBREW_NO_AUTO_UPDATE: 1  # for reproducibility, dont autoupdate
  BUILD_TYPE: RelWithDebInfo
  INSTALL_DIR: install

jobs:

  # Job testing compiling on several Linux systems + MPI
  # =========================================================
  Linux_MPI:
    runs-on: ${{matrix.os}}
    strategy:
      matrix:
        os: [ubuntu-16.04, ubuntu-18.04, ubuntu-20.04]

    steps:
    - uses: actions/checkout@v2
    - uses: conda-incubator/setup-miniconda@v2

    - name: "Install libraries"
      shell: bash -l {0}  # required to activate conda
      run: |
        sudo apt-get -qq update
        sudo apt-get -qq install libboost-all-dev libhdf5-openmpi-dev libeigen3-dev libsz2
        conda install -y -c conda-forge xtl xsimd xtensor

    - name: Build
      shell: bash -l {0}  # required to activate conda
      run: |
        CMAKE_OPTIONS=(-DHIGHFIVE_PARALLEL_HDF5:BOOL=ON -DHIGHFIVE_USE_XTENSOR:BOOL=ON)
        source $GITHUB_WORKSPACE/.github/build.sh

    - name: Test
      working-directory: ${{github.workspace}}/build
      run: ctest --output-on-failure -C $BUILD_TYPE


  # Job testing several compilers on a stable Linux
  # ====================================================
  Linux_Compilers:
    runs-on: ubuntu-18.04
    strategy:
      matrix:
        env: [
          {CC: clang-9, CXX: clang++-9},
          {CC: gcc-9, CXX: g++-9},
          {CC: gcc-10, CXX: g++-10},
        ]

    steps:
    - uses: actions/checkout@v2

    - name: "Install libraries"
      run: sudo apt-get update && sudo apt-get install libboost-all-dev libhdf5-dev libeigen3-dev libsz2

    - name: Build
      env: ${{matrix.env}}
      run: source $GITHUB_WORKSPACE/.github/build.sh

    - name: Test
      working-directory: ${{github.workspace}}/build
      run: ctest --output-on-failure -C $BUILD_TYPE


  # Job testing in OSX
  # =======================
  OSX:
    runs-on: macOS-10.15

    steps:
    - uses: actions/checkout@v2

    - name: "Install libraries (OSX)"
      run: brew install boost hdf5 eigen

    - name: Build
      run: source $GITHUB_WORKSPACE/.github/build.sh

    - name: Test
      working-directory: ${{github.workspace}}/build
      run: ctest --output-on-failure -C $BUILD_TYPE


  # Job testing in Windows
  # ===========================
  Windows:
    runs-on: Windows-latest
    steps:
    - uses: actions/checkout@v2
    - uses: conda-incubator/setup-miniconda@v2

    - name: "Install libraries"
      run: conda install -y -c conda-forge boost-cpp hdf5 eigen xtl xsimd xtensor

    - name: Build
      shell: bash -l {0}
      run: |
        CMAKE_OPTIONS=(-DHIGHFIVE_USE_XTENSOR:BOOL=ON)
        source $GITHUB_WORKSPACE/.github/build.sh

    - name: Test
      working-directory: ${{github.workspace}}/build
      shell: bash -l {0}
      run: ctest --output-on-failure -C $BUILD_TYPE

  # Job producing code coverage report
  # ==================================
  Code_coverage:
    runs-on: macOS-10.15

    steps:
    - name: "Install libraries"
      run: brew install boost hdf5 eigen lcov

    - uses: actions/checkout@v2
      with:
        fetch-depth: 2

    - name: Build and test for code coverage
      run: |
        CMAKE_OPTIONS=(-DHIGHFIVE_BUILD_DOCS:BOOL=FALSE -DCMAKE_CXX_FLAGS="-coverage -O0")
        source $GITHUB_WORKSPACE/.github/build.sh
        (cd $GITHUB_WORKSPACE;  lcov --capture  --initial --directory . --no-external --output-file build/coverage-base.info)
        make test
        (cd $GITHUB_WORKSPACE; lcov --capture  --directory . --no-external --output-file build/coverage-run.info)
        lcov --add-tracefile coverage-base.info --add-tracefile coverage-run.info --output-file coverage-combined.info
        bash <(curl -s https://codecov.io/bash) -f coverage-combined.info
